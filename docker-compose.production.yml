version: '3.8'

services:
  # Virtual Queue API
  virtualqueue-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=virtualqueue_prod
      - DB_USER=virtualqueue_user
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_CONNECTION_STRING=redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ISSUER=VirtualQueue-Production
      - JWT_AUDIENCE=VirtualQueueUsers-Production
      - JWT_EXPIRATION_MINUTES=60
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=587
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=Virtual Queue System
      - SMS_PROVIDER=${SMS_PROVIDER}
      - SMS_API_KEY=${SMS_API_KEY}
      - SMS_API_SECRET=${SMS_API_SECRET}
      - SMS_FROM_NUMBER=${SMS_FROM_NUMBER}
      - WHATSAPP_PROVIDER=${WHATSAPP_PROVIDER}
      - WHATSAPP_API_KEY=${WHATSAPP_API_KEY}
      - WHATSAPP_API_SECRET=${WHATSAPP_API_SECRET}
      - WHATSAPP_FROM_NUMBER=${WHATSAPP_FROM_NUMBER}
      - RATE_LIMIT_PER_MINUTE=100
      - RATE_LIMIT_BURST=200
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - BACKUP_STORAGE_PROVIDER=${BACKUP_STORAGE_PROVIDER}
      - BACKUP_STORAGE_PATH=${BACKUP_STORAGE_PATH}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - virtualqueue-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=virtualqueue_prod
      - POSTGRES_USER=virtualqueue_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U virtualqueue_user -d virtualqueue_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - virtualqueue-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - virtualqueue-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - virtualqueue-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - virtualqueue-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - virtualqueue-api
    restart: unless-stopped
    networks:
      - virtualqueue-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  virtualqueue-network:
    driver: bridge
